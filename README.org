#+title:     Rust Language
#+author:    Manmohan Krishna
#+email:     krishna.m.zyw@gmail.com

* Rust
** commands
*** rustc
1. rustc --version
    To check rust version
2. rustc file.rs
    Compile file.rs
*** rustup
1. rustup update
    Update rust
2. rustup self uninstall
    Uninstalls rust
*** cargo
1. cargo --version
    Compile file.rs
2. cargo new <your project>
    To create a new project using cargo
3. cargo build
    Updates registry of crates available
    Creates `target/debug/<your project name>` executable
4. cargo run
    To run the generated binary executable
5. cargo check
    To check if the code compiles but doesn't produce an executable
6. cargo build --release
    To compile with optimizations
    Creates an executable in `target/release` instead of `target/debug`
7. cargo update
    Updates `creates.io` index and updates the dependencies that fit `Cargo.toml` following SemVer(Semantic Versioning).
8. cargo doc --open 
    Will build documentation provided by all your dependencies locally and open it in your browser
** general info
- `println!`, because it has an ! is a macro. If it did not, it would have been a function.
- Cargo - Rust's build system and package manager
- Convention is to name project with snake_case not camelCase.
- Because the default build is a debug build, Cargo puts the binary in a directory named "debug".
** the language
- std::io for input/output
- standard library items brought into the scope of every program called `prelude`
- to bring a `type` into scope explicitly, eg, 
  #+begin_src 
  use std::io;
  #+end_src
- `let` statement to create a variable; mut to make it mutable(immutable by default)
  #+begin_src rust
  let mut guess = String::new();
  let apples = 5;
  #+end_src
- Calling `String::new` returns a new instances of a `String`, which is a string type provided by the standard library that is `growable`.
- "::" syntax in "::new" indices that new is an associated function of the `String` type.
- An "associated function" is a function that's implemented on a type(like extension methods in Scala).
- The stdin function returns an instance of std::io::Stdin, which is a type that represents a handle to the standard input for your terminal.
- The & indicates that this argument is a reference, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times.
- Like variables, "references" are immutable by default.
- `read_line` returns a `Result` value, which is an Enumeration(or Enum), which can have one of a set of possible states.
- Each possible state of an Enum is called a `variant`.
- Result’s variants are Ok and Err(Like Try, Success and Failure in Scala).
- Calling expect on a Result type - Returns the contained [`Ok`] value, consuming the `self` value. (Use is discouraged)
- A `Crate` is a collection of Rust source code files.
  Any project that we build is a binary crate, which is an executable.
- Dependencies' latest versions are fetched from the registry, which is a copy of data from [[https://www.crates.io]]
- Cargo.lock File - Ensures Reproducible builds
  Often checked into source control with the rest of the code in the project.
- The `Rng` trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods.
- A pattern match is made up of "arms". An arm consists of a pattern to match against.
- Unless otherwise specified, Rust defaults to an i32
- Shadowing lets us reuse a variable name rather than forcing us to create two unique variables. 
  This feature is often used when you want to convert a value from one type to another type.
- There is a difference between immutables variables and `const`s.
  Constants are always immutable. You declare constants using the `const` keyword.
  The type must also be annotated for a `const`.
  Constants can be declared in global scope.
  Constants can be set only to a constant expression, not the result of a value that
  could only be computed at runtime.
  #+begin_src rust
  const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;
  #+end_src
- When trying to use "Shadowing" to reassign a variable, you need to use the `let` keyword.
- Shadowing is different from marking a variable as mut because we’ll get a compile-time error if we accidentally try to reassign to this variable without using the let keyword. By using let, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.
  The other difference between mut and shadowing is that because we’re effectively creating a new variable when we use the let keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, and then we want to store that input as a number:
  #+begin_src rust
  let spaces = "   ";
  let spaces = spaces.len();
  #+end_src
** Data Types
1. Scalar
- Integer
  | Length  | Signed | Unsigned |
  |---------+--------+----------|
  | 8-bit   | i8     | u8       |
  | 16-bit  | i16    | u16      |
  | 32-bit  | i32    | u32      |
  | 64-bit  | i64    | u64      |
  | 128-bit | i128   | u128     |
  | arch    | isize  | usize    |
- Floats
  f32 and f64(default)
- Booleans(bool)
  `true` and `false`
- Characters(char)
  Four bytes in size and represents a Unicode Scalar Value
2. Compound
- Tuple
  Typles without any values has a special name, `unit`.
  #+begin_src rust
  let tup = (500, 6.4, 1);

  // Destructuring(using Pattern matching)
  let (x, y, z) = tup;

  // Old Scala-like syntax where the index is present inside parentheses.
  let five_hundred = x.0;
  let six_point_four = x.1;
  let one = x.2;
  #+end_src
- Array
  Arrays in Rust have a fixed length. 
  Even if you access an invalid index from an array, you will not get an invalid memory access.
  You will get an error like this -
  `
  thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 17', src/main.rs:19:19
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
  `
  #+begin_src rust
  fn main() {
      let a = [1, 2, 3, 4, 5];
      let b: [i32; 5] = [1, 2, 3, 4, 5];
      let a = [3; 5]; // Unlike in Scala, where we would do: Array.fill(5)(3)
      let first = a[0];
      let second = a[1];
  }
  #+end_src
- Vector
  Can grow or shrink in size, unlike Array.
** Functions
*** Statements and Expressions
Statements are instructions that perform some action and do not return a value.
Expressions evaluate to a resultant value.
*** Functions with return values
- `->` is used to give the return type for a function.
- You can return early with a `return` keyword.
- Most functions return the last expression implicitly.
** Control Flow
*** `if` Expressions
#+begin_src rust
fn main() {
    let number = 6;

    if number % 4 == 0 {
        println!("number is divisible by 4");
    } else if number % 3 == 0 {
        println!("number is divisible by 3");
    } else if number % 2 == 0 {
        println!("number is divisible by 2");
    } else {
        println!("number is not divisible by 4, 3, or 2");
    }
}
#+end_src
Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean.
*** Repetition with Loops
There are three kinds of loops in Rust.
1. `loop`
    - use `break` to come out of loop
    - use `continue` to skip the rest of the current iteration
    #+begin_src rust
    fn main() {
        let mut counter = 0;

        let result = loop {
            counter += 1;

            if counter == 10 {
                break counter * 2;
            }
        };

        println!("The result is {result}");
    }
    #+end_src
    - Loop labels to disambiguate between multiple loops
      #+begin_src rust
      fn main() {
          let mut count = 0;
          'counting_up: loop {
              println!("count = {count}");
              let mut remaining = 10;

              loop {
                  println!("remaining = {remaining}");
                  if remaining == 9 {
                      break;
                  }
                  if count == 2 {
                      break 'counting_up;
                  }
                  remaining -= 1;
              }

              count += 1;
          }
          println!("End count = {count}");
      }
      #+end_src
2. `while`
3. `for`
#+begin_src rust
fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a {
        println!("the value is: {element}");
    }
}
#+end_src
** Ownership
It enables Rust to make memory safety guarantees without needing a garbage collector.
Ownership is a set of rules that govern how a Rust program manages memory.
Memory is managed through a system of ownership with a set of rules that the compiler checks. If any of the rules are violated, the program won’t compile.
Keeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don’t run out of space are all problems that ownership addresses.
*** Ownership Rules
1. Each value in Rust has an owner.
2. There can only be one owner at a time.
3. When the owner goes out of scope, the value will be `drop`ped.
**** Double free error
To ensure memory safety, after the line let s2 = s1;, Rust considers s1 as no longer valid. Therefore, Rust doesn’t need to free anything when s1 goes out of scope.
#+begin_src rust
let s1 = String::from("hello");
let s2 = s1;

println!("{}, world!", s1);
#+end_src
If you’ve heard the terms shallow copy and deep copy while working with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy.
But because Rust also invalidates the first variable, instead of being called a shallow copy, it’s known as a `move`.
Rust will never automatically create “deep” copies of your data.
Therefore, any automatic copying can be assumed to be inexpensive in terms of runtime performance.
**** Variables and Data Interacting with Clone
If we do want to deeply copy the heap data of the String, not just the stack data, we can use a common method called clone
#+begin_src rust
let s1 = String::from("hello");
let s2 = s1.clone();
println!("s1 = {}, s2 = {}", s1, s2);
#+end_src
**** Stack-Only Data: `Copy`
#+begin_src rust
let x = 5;
let y = x;
println!("x = {}, y = {}", x, y);
#+end_src
Types such as integers have a known size at compile time and are stored entirely 
on the stack, so copies of the actual values are quick to make. 
That means there’s no reason we would want to prevent x from being valid after 
we create the variable y. 
In other words, there’s no difference between deep and shallow copying here,
so calling clone wouldn’t do anything different from the usual shallow copying, 
and we can leave it out.

Rust has a special annotation called the `Copy` trait that we can place on types 
that are stored on the stack, as integers are. 
If a type implements the Copy trait, variables that use it do not move, but rather
are trivially copied, making them still valid after assignment to another variable.

Rust won’t let us annotate a type with Copy if the type, or any of its parts, has
implemented the Drop trait. If the type needs something special to happen when the
value goes out of scope and we add the Copy annotation to that type, we’ll get a
compile-time error.

Tuples, if they only contain types that also implement Copy. For example, (i32, i32)
implements Copy, but (i32, String) does not.
**** Owernship and Functions
The mechanics of passing a value to a function are similar to those when assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does.
**** Return Values and Scope
The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by drop unless ownership of the data has been moved to another variable.
**** References and Borrowing
A reference is like a pointer in that it’s an address we can follow to access the data stored at that address; that data is owned by some other variable. Unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the life of that reference.
These ampersands represent references, and they allow you to refer to some value without taking ownership of it.
#+begin_src rust
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize { // s is a reference to a String
    s.len()
} // Here, s goes out of scope. But because it does not have ownership of what
  // it refers to, it is not dropped.
#+end_src
The &s1 syntax lets us create a reference that refers to the value of s1 but does not own it. Because it does not own it, the value it points to will not be dropped when the reference stops being used.
Likewise, the signature of the function uses & to indicate that the type of the parameter s is a reference.
Note: The opposite of referencing by using & is dereferencing, which is accomplished with the dereference operator, *.

When functions have references as parameters instead of the actual values, we won’t need to return the values in order to give back ownership, because we never had ownership.
We call the action of creating a reference `borrowing`.
Just as variables are immutable by default, so are references. We’re not allowed to modify something we have a reference to.
**** Mutable References
#+begin_src rust
fn main() {
    let mut s = String::from("hello");

    change(&mut s); // passing a mutable reference
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}
#+end_src
In the example above,
First we change s to be mut. Then we create a mutable reference with &mut s where we call the change function, and update the function signature to accept a mutable reference with some_string: &mut String. This makes it very clear that the change function will mutate the value it borrows.
Mutable references have one big restriction: if you have a mutable reference to a value, you can have no other references to that value.

The restriction preventing multiple mutable references to the same data at the same time allows for mutation but in a very controlled fashion.
The benefit of having this restriction is that Rust can prevent `data races` at compile time. A data race is similar to a race condition and happens when these three behaviors occur:

Two or more pointers access the same data at the same time.
At least one of the pointers is being used to write to the data.
There’s no mechanism being used to synchronize access to the data.

We also cannot have a mutable reference while we have an immutable one to the same value.
However, multiple immutable references are allowed because no one who is just reading the data has the ability to affect anyone else’s reading of the data.
Note that a reference’s scope starts from where it is introduced and continues through the last time that reference is used. 
**** Dangling References
In Rust, the compiler guarantees that references will never be dangling references: if you have a reference to some data, the compiler will ensure that the data will not go out of scope before the reference to the data does.
#+begin_src rust
fn dangle() -> &String { // dangle returns a reference to a String

    let s = String::from("hello"); // s is a new String

    &s // we return a reference to the String, s
} // Here, s goes out of scope, and is dropped. Its memory goes away.
  // Danger!
#+end_src
Because s is created inside dangle, when the code of dangle is finished, s will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid String. That’s no good! Rust won’t let us do this.
**** The Rules of References
Let’s recap what we’ve discussed about references:
1. At any given time, you can have either one mutable reference or any number of immutable references.
2. References must always be valid.
*** The Slice Type
Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection. A slice is a kind of reference, so it does not have ownership.
Defining a function to take a string slice instead of a reference to a String makes our API more general and useful without losing any functionality.
String literals are string slices, ie,
#+begin_src rust
let s = "hello world";
#+end_src

A more general form is:
#+begin_src rust
fn first_word(s: &str) -> &str {
#+end_src
than
#+begin_src rust
fn first_word(s: &String) -> &str {
#+end_src

The above one is going to work with both, a `String` since we can pass a slice of it
and a string slice(string literal).
**** Other Slices
#+begin_src rust
let a = [1, 2, 3, 4, 5];

let slice: &[i32] = &a[1..3];

assert_eq!(slice, &[2, 3]);
#+end_src
It works the same way as string slices do, by storing a reference to the first element and a length.
** Structs
A struct, or structure, is a custom data type that lets you package together and name multiple related values that make up a meaningful group.
*** Creating Structs
#+begin_src rust
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}
#+end_src
*** Creating instances from other instances with Struct Update Syntax
#+begin_src rust
fn main() {
    // --snip--

    let user2 = User {
        email: String::from("another@example.com"),
        ..user1
    };
}
#+end_src
In this example, we can no longer use user1 as a whole after creating user2 because the String in the username field of user1 was moved into user2. If we had given user2 new String values for both email and username, and thus only used the active and sign_in_count values from user1, then user1 would still be valid after creating user2. Both active and sign_in_count are types that implement the Copy trait.
*** Using Tuple Structs Without Named Fields to Create Different Types
#+begin_src rust
struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

fn main() {
    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
}
#+end_src
You can use a . followed by the index to access an individual value.
*** Unit-Like Structs Without Any Fields
You can also define structs that don’t have any fields! These are called unit-like structs because they behave similarly to ()
#+begin_src rust
struct AlwaysEqual;

fn main() {
    let subject = AlwaysEqual;
}
#+end_src
*** Ownership of Struct Data
In the User struct definition for User, we used the owned String type rather than the &str string slice type. This is a deliberate choice because we want each instance of this struct to own all of its data and for that data to be valid for as long as the entire struct is valid.
Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is.
*** Adding Useful functionality with Derived Traits
#+begin_src rust
#[derive(Debug)]
struct Rectangle {    
    width: u32,
    height: u32
}
fn main() {
    let rect: Rectangle = Rectangle {
        width: 30,
        height: 50,
    };
    println!(
        "The area of the rectangle {:?} is {} square pixels.",
        rect,
        area(&rect)
    );
}

fn area(rectangle: &Rectangle) -> u32 {
    rectangle.width * rectangle.height
}
#+end_src
You can use {:#?} for Structs with more fields.
*** dbg macro
Another way to print out a value using the Debug format is to use the dbg! macro, which takes ownership of an expression (as opposed to println!, which takes a reference), prints the file and line number of where that dbg! macro call occurs in your code along with the resultant value of that expression, and returns ownership of the value.
